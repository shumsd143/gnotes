{"ast":null,"code":"var _jsxFileName = \"D:\\\\html and\\\\gnotes\\\\src\\\\component\\\\answerof.jsx\";\nimport React, { Component } from 'react';\nimport Answercard from './answercard';\nimport { Form, FormGroup, CustomInput, InputGroup, InputGroupAddon, Input, Spinner } from 'reactstrap';\nimport './bodyallfile.css';\n\nclass Answerof extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetcher = () => {\n      fetch('https://apinotessh.herokuapp.com/comment').then(res => res.json()).then(json => {\n        var arr = json.data;\n        this.setState({\n          urlvalue: this.state.urlvalue,\n          load: true,\n          items: arr\n        });\n      });\n    };\n\n    this.inputofanswer = event => {\n      let val = event.target.value;\n      let questionarray = this.state.items;\n      let shownarray = [];\n      questionarray.map(value => {\n        let question = value.question.toLowerCase();\n        let check = question.includes(val);\n\n        if (check == true) {\n          shownarray.push(value);\n        }\n      });\n      console.log(shownarray);\n    };\n\n    this.state = {\n      urlvalue: [],\n      items: [],\n      load: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetcher();\n    this.interval = setInterval(() => {\n      this.fetcher();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    var {\n      load,\n      items\n    } = this.state; //console.log(items)\n\n    if (load == true) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(Form, {\n        className: \"questionfindform\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(InputGroup, {\n        size: \"lg\",\n        className: \"Adjustinput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Input, {\n        placeholder: \"Enter the keyword\",\n        onChange: this.inputofanswer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      })))), items.map(data => React.createElement(Answercard, {\n        orgvalue: data,\n        id: data.question,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Spinner, {\n        style: {\n          width: '3rem',\n          height: '3rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), ' ', React.createElement(Spinner, {\n        style: {\n          width: '3rem',\n          height: '3rem'\n        },\n        type: \"grow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })));\n    }\n  }\n\n}\n\nexport default Answerof;","map":{"version":3,"sources":["D:/html and/gnotes/src/component/answerof.jsx"],"names":["React","Component","Answercard","Form","FormGroup","CustomInput","InputGroup","InputGroupAddon","Input","Spinner","Answerof","constructor","props","fetcher","fetch","then","res","json","arr","data","setState","urlvalue","state","load","items","inputofanswer","event","val","target","value","questionarray","shownarray","map","question","toLowerCase","check","includes","push","console","log","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","width","height"],"mappings":"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","sourcesContent":["import React,{ Component } from 'react';\r\nimport Answercard from './answercard'\r\nimport {Form,FormGroup,CustomInput,InputGroup,InputGroupAddon,Input,Spinner} from 'reactstrap'\r\nimport './bodyallfile.css';\r\n\r\nclass Answerof extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            urlvalue:[],\r\n            items:[],\r\n            load:false,\r\n          }\r\n    }\r\n    fetcher=()=>{\r\n        fetch('https://apinotessh.herokuapp.com/comment')\r\n        .then(res=>res.json())\r\n        .then(json=>{\r\n          var arr=json.data\r\n          this.setState({\r\n            urlvalue:this.state.urlvalue,\r\n            load:true,\r\n            items:arr\r\n          })\r\n        })\r\n      }\r\n      componentDidMount(){\r\n        this.fetcher();\r\n        this.interval=setInterval(()=>{this.fetcher()},1000)\r\n      }\r\n      componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n      }\r\n    inputofanswer=(event)=>{\r\n      let val=event.target.value\r\n      let questionarray=this.state.items\r\n      let shownarray=[]\r\n      questionarray.map((value)=>{\r\n        let question=value.question.toLowerCase()\r\n        let check=question.includes(val)\r\n        if(check==true){\r\n          shownarray.push(value)\r\n        }\r\n      })\r\n      console.log(shownarray)\r\n\r\n    }\r\n    render(){\r\n        var {load,items}=this.state\r\n        //console.log(items)\r\n        if(load==true){\r\n          return (\r\n              <div>\r\n                <div>\r\n                    <Form className=\"questionfindform\">\r\n                    <InputGroup size=\"lg\" className=\"Adjustinput\">\r\n                      <Input placeholder=\"Enter the keyword\" onChange={this.inputofanswer}/>\r\n                    </InputGroup>\r\n                    </Form>\r\n                  </div>\r\n                  {items.map(data=>\r\n                      <Answercard orgvalue={data} id={data.question}/>\r\n                  )}\r\n              </div>\r\n          )\r\n        }\r\n        else{\r\n          return (\r\n              <div>\r\n                  <center>\r\n                    <Spinner style={{ width: '3rem', height: '3rem' }} />{' '}\r\n                    <Spinner style={{ width: '3rem', height: '3rem' }} type=\"grow\" />\r\n                  </center>\r\n              </div>\r\n          )\r\n        }    \r\n    }\r\n}\r\n\r\n\r\nexport default Answerof"]},"metadata":{},"sourceType":"module"}