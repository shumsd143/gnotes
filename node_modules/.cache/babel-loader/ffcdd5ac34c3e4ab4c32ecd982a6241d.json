{"ast":null,"code":"var _jsxFileName = \"D:\\\\html and\\\\gnotes\\\\src\\\\component\\\\answerof.jsx\";\nimport React, { Component } from 'react';\nimport Answercard from './answercard';\nimport { Form, FormGroup, CustomInput, InputGroup, InputGroupAddon, Input, Spinner } from 'reactstrap';\nimport './bodyallfile.css';\n\nclass Answerof extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetcher = () => {\n      fetch('https://apinotessh.herokuapp.com/comment').then(res => res.json()).then(json => {\n        var arr = json.data;\n        this.setState({\n          urlvalue: this.state.urlvalue,\n          afterurl: this.state.afterurl,\n          load: true,\n          items: arr\n        });\n      });\n    };\n\n    this.inputofanswer = event => {\n      let val = event.target.value;\n      let questionarray = this.state.items;\n      let shownarray = [];\n      questionarray.map(value => {\n        let question = value.question.toLowerCase();\n        let check = question.includes(val);\n\n        if (check == true) {\n          shownarray.push(value);\n        }\n      });\n      this.setState({\n        urlvalue: val,\n        afterurl: shownarray,\n        load: true,\n        items: this.state.items\n      });\n    };\n\n    this.state = {\n      urlvalue: '',\n      afterurl: [],\n      items: [],\n      load: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetcher();\n    this.interval = setInterval(() => {\n      this.fetcher();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    var {\n      load,\n      items,\n      urlvalue,\n      afterurl\n    } = this.state; //console.log(items)\n\n    if (load == true) {\n      if (urlvalue == '') {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, React.createElement(Form, {\n          className: \"questionfindform\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, React.createElement(InputGroup, {\n          size: \"lg\",\n          className: \"Adjustinput\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, React.createElement(Input, {\n          placeholder: \"Enter the keyword\",\n          value: urlvalue,\n          onChange: this.inputofanswer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        })))), items.map(data => React.createElement(Answercard, {\n          orgvalue: data,\n          id: data.question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        })));\n      } else {\n        if (afterurl.length == 0) {} else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          }, React.createElement(Form, {\n            className: \"questionfindform\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82\n            },\n            __self: this\n          }, React.createElement(InputGroup, {\n            size: \"lg\",\n            className: \"Adjustinput\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83\n            },\n            __self: this\n          }, React.createElement(Input, {\n            placeholder: \"Enter the keyword\",\n            value: urlvalue,\n            onChange: this.inputofanswer,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84\n            },\n            __self: this\n          })))), afterurl.map(data => React.createElement(Answercard, {\n            orgvalue: data,\n            id: data.question,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          })));\n        }\n      }\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Spinner, {\n        style: {\n          width: '3rem',\n          height: '3rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), ' ', React.createElement(Spinner, {\n        style: {\n          width: '3rem',\n          height: '3rem'\n        },\n        type: \"grow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      })));\n    }\n  }\n\n}\n\nexport default Answerof;","map":{"version":3,"sources":["D:/html and/gnotes/src/component/answerof.jsx"],"names":["React","Component","Answercard","Form","FormGroup","CustomInput","InputGroup","InputGroupAddon","Input","Spinner","Answerof","constructor","props","fetcher","fetch","then","res","json","arr","data","setState","urlvalue","state","afterurl","load","items","inputofanswer","event","val","target","value","questionarray","shownarray","map","question","toLowerCase","check","includes","push","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","length","width","height"],"mappings":"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","sourcesContent":["import React,{ Component } from 'react';\r\nimport Answercard from './answercard'\r\nimport {Form,FormGroup,CustomInput,InputGroup,InputGroupAddon,Input,Spinner} from 'reactstrap'\r\nimport './bodyallfile.css';\r\n\r\nclass Answerof extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            urlvalue:'',\r\n            afterurl:[],\r\n            items:[],\r\n            load:false,\r\n          }\r\n    }\r\n    fetcher=()=>{\r\n        fetch('https://apinotessh.herokuapp.com/comment')\r\n        .then(res=>res.json())\r\n        .then(json=>{\r\n          var arr=json.data\r\n          this.setState({\r\n            urlvalue:this.state.urlvalue,\r\n            afterurl:this.state.afterurl,\r\n            load:true,\r\n            items:arr\r\n          })\r\n        })\r\n      }\r\n      componentDidMount(){\r\n        this.fetcher();\r\n        this.interval=setInterval(()=>{this.fetcher()},1000)\r\n      }\r\n      componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n      }\r\n    inputofanswer=(event)=>{\r\n      let val=event.target.value\r\n      let questionarray=this.state.items\r\n      let shownarray=[]\r\n      questionarray.map((value)=>{\r\n        let question=value.question.toLowerCase()\r\n        let check=question.includes(val)\r\n        if(check==true){\r\n          shownarray.push(value)\r\n        }\r\n      })\r\n      this.setState({\r\n        urlvalue:val,\r\n        afterurl:shownarray,\r\n        load:true,\r\n        items:this.state.items\r\n      })\r\n    }\r\n    render(){\r\n        var {load,items,urlvalue,afterurl}=this.state\r\n        //console.log(items)\r\n        if(load==true){\r\n          if(urlvalue==''){\r\n            return (\r\n              <div>\r\n                <div>\r\n                  <Form className=\"questionfindform\">\r\n                  <InputGroup size=\"lg\" className=\"Adjustinput\">\r\n                    <Input placeholder=\"Enter the keyword\" value={urlvalue} onChange={this.inputofanswer}/>\r\n                  </InputGroup>\r\n                  </Form>\r\n                </div>\r\n                {items.map(data=>\r\n                  <Answercard orgvalue={data} id={data.question}/>\r\n                )}\r\n              </div>\r\n            )\r\n          }\r\n          else{\r\n            if(afterurl.length==0){\r\n\r\n            }\r\n            else{\r\n              return (\r\n                <div>\r\n                  <div>\r\n                    <Form className=\"questionfindform\">\r\n                    <InputGroup size=\"lg\" className=\"Adjustinput\">\r\n                      <Input placeholder=\"Enter the keyword\" value={urlvalue} onChange={this.inputofanswer}/>\r\n                    </InputGroup>\r\n                    </Form>\r\n                  </div>\r\n                  {afterurl.map(data=>\r\n                    <Answercard orgvalue={data} id={data.question}/>\r\n                  )}\r\n                </div>\r\n              )\r\n            }\r\n          }\r\n        }\r\n        else{\r\n          return (\r\n              <div>\r\n                  <center>\r\n                    <Spinner style={{ width: '3rem', height: '3rem' }} />{' '}\r\n                    <Spinner style={{ width: '3rem', height: '3rem' }} type=\"grow\" />\r\n                  </center>\r\n              </div>\r\n          )\r\n        }    \r\n    }\r\n}\r\n\r\n\r\nexport default Answerof"]},"metadata":{},"sourceType":"module"}