{"ast":null,"code":"var _jsxFileName = \"D:\\\\html and\\\\gnotes\\\\src\\\\component\\\\questionof.jsx\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport { Form, Button, Badge } from 'react-bootstrap';\nimport { Breadcrumb, Alert, BreadcrumbItem, Spinner } from 'reactstrap';\nimport './bodyallfile.css';\n\nclass Questionof extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onposter = () => {\n      var str = this.state.onquestion;\n\n      if (str == '') {\n        alert('please enter the question');\n        return;\n      }\n\n      var data = {\n        'question': str\n      };\n      axios.post('https://apinotessh.herokuapp.com/comment/post', data).then(res => {\n        this.setState({\n          items: this.state.items,\n          load: this.state.load,\n          onquestion: ''\n        });\n      });\n    };\n\n    this.changer = event => {\n      var s = event.target.value;\n      this.setState({\n        load: this.state.load,\n        items: this.state.items,\n        onquestion: s\n      });\n    };\n\n    this.fetcher = () => {\n      fetch('https://apinotessh.herokuapp.com/comment').then(res => res.json()).then(json => {\n        var arr = json.data;\n        this.setState({\n          load: true,\n          items: arr,\n          onquestion: this.state.onquestion\n        });\n      });\n    };\n\n    this.state = {\n      items: [],\n      load: false,\n      onquestion: ''\n    };\n  }\n\n  componentDidMount() {\n    this.fetcher();\n    this.interval = setInterval(() => {\n      this.fetcher();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    var {\n      load,\n      items,\n      onquestion\n    } = this.state;\n    console.log(onquestion);\n\n    if (load == true) {\n      return React.createElement(\"div\", {\n        className: \"addedinput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Form.Control, {\n        size: \"lg\",\n        type: \"text\",\n        onChange: this.changer,\n        value: onquestion,\n        placeholder: \"Type your question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"questbut\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.onposter,\n        variant: \"dark\",\n        size: \"lg\",\n        block: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Post your question\")), React.createElement(\"div\", {\n        className: \"bread\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Badge, {\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Already Posted Question\")))), items.map(data => React.createElement(Alert, {\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, data.question)));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"addedinput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(Form.Control, {\n        size: \"lg\",\n        type: \"text\",\n        onChange: this.changer,\n        value: onquestion,\n        placeholder: \"Type your question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"questbut\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"dark\",\n        size: \"lg\",\n        onClick: this.onposter,\n        block: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Post your question\")), React.createElement(\"div\", {\n        className: \"bread\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Badge, {\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Already Posted Question\")))), React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Spinner, {\n        style: {\n          width: '3rem',\n          height: '3rem'\n        },\n        type: \"grow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      })));\n    }\n  }\n\n}\n\nexport default Questionof;","map":{"version":3,"sources":["D:/html and/gnotes/src/component/questionof.jsx"],"names":["axios","React","Component","Form","Button","Badge","Breadcrumb","Alert","BreadcrumbItem","Spinner","Questionof","constructor","props","onposter","str","state","onquestion","alert","data","post","then","res","setState","items","load","changer","event","s","target","value","fetcher","fetch","json","arr","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","console","log","map","question","width","height"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React,{ Component } from 'react';\r\nimport {Form,Button,Badge} from 'react-bootstrap'\r\nimport { Breadcrumb,Alert, BreadcrumbItem,Spinner } from 'reactstrap';\r\nimport './bodyallfile.css';\r\nclass Questionof extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            items:[],\r\n            load:false,\r\n            onquestion:'',\r\n          }\r\n    }\r\n    onposter=()=>{\r\n        var str=this.state.onquestion\r\n        if(str==''){\r\n            alert('please enter the question')\r\n            return\r\n        }\r\n        var data={'question':str}\r\n        axios.post('https://apinotessh.herokuapp.com/comment/post',data).then(res=>{\r\n            this.setState({\r\n                items:this.state.items,\r\n                load:this.state.load,\r\n                onquestion:''\r\n            })\r\n        })\r\n    }\r\n    changer=(event)=>{\r\n        var s=event.target.value\r\n        this.setState({\r\n            load:this.state.load,\r\n            items:this.state.items,\r\n            onquestion:s\r\n        })\r\n    }\r\n    fetcher=()=>{\r\n        fetch('https://apinotessh.herokuapp.com/comment')\r\n        .then(res=>res.json())\r\n        .then(json=>{\r\n          var arr=json.data\r\n          this.setState({\r\n            load:true,\r\n            items:arr,\r\n            onquestion:this.state.onquestion\r\n          })\r\n        })\r\n      }\r\n      componentDidMount(){\r\n        this.fetcher();\r\n        this.interval=setInterval(()=>{this.fetcher()},1000)\r\n      }\r\n      componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n    render(){\r\n        var {load,items,onquestion}=this.state\r\n        console.log(onquestion)\r\n        if(load==true){\r\n            return (\r\n                <div className=\"addedinput\">\r\n                    <Form.Control size=\"lg\" type=\"text\" onChange={this.changer} value={onquestion} placeholder=\"Type your question\" />\r\n                    <div className=\"questbut\">\r\n                    <Button onClick={this.onposter} variant=\"dark\" size=\"lg\" block>\r\n                        Post your question\r\n                    </Button></div>\r\n                    <div className=\"bread\">\r\n                        <center><h1>\r\n                            <Badge variant=\"primary\">Already Posted Question</Badge></h1>\r\n                        </center>\r\n                    </div>\r\n                    {items.map(data=>\r\n                        <Alert color=\"secondary\">\r\n                            {data.question}\r\n                        </Alert>\r\n                    )}\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            return (\r\n                <div className=\"addedinput\">\r\n                    <Form.Control size=\"lg\" type=\"text\" onChange={this.changer} value={onquestion} placeholder=\"Type your question\" />\r\n                    <div className=\"questbut\">\r\n                    <Button variant=\"dark\" size=\"lg\" onClick={this.onposter} block>\r\n                    Post your question\r\n                    </Button></div>\r\n                    <div className=\"bread\">\r\n                        <center><h1>\r\n                            <Badge variant=\"primary\">Already Posted Question</Badge></h1>\r\n                        </center>\r\n                    </div>\r\n                    <center><Spinner style={{ width: '3rem', height: '3rem' }} type=\"grow\" /></center>\r\n                </div>\r\n            )\r\n        }    \r\n    }\r\n}\r\n\r\n\r\nexport default Questionof"]},"metadata":{},"sourceType":"module"}